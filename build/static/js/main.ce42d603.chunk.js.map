{"version":3,"sources":["Components/Filter.js","Components/Form.js","Components/People.js","services/persons.js","Components/Notification.js","App.js","index.js"],"names":["Filter","props","value","search","onChange","handleSearch","Form","onSubmit","handleSubmit","newName","handleNewName","newNumber","handleNewNumber","type","People","string","persons","filter","person","name","toLowerCase","includes","map","key","id","number","onClick","handleClick","apiURL","axios","get","then","res","data","newObj","post","put","delete","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setSearch","setMessage","useEffect","noteService","initialData","checkName","handleNewPhone","selPerson","find","newInfo","window","confirm","updatedInfo","catch","err","setTimeout","e","target","preventDefault","personObj","newPerson","concat","newList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce42d603.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = props => {\n  return (\n    <div>\n      Filter by name{' '}\n      <input value={props.search} onChange={props.handleSearch} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst Form = props => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNewName} />\n      </div>\n      <div>\n        number:{' '}\n        <input value={props.newNumber} onChange={props.handleNewNumber} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst People = props => {\n  const searchPersons = string => {\n    return props.persons\n      .filter(person =>\n        person.name.toLowerCase().includes(string.toLowerCase())\n      )\n      .map(person => (\n        <div key={person.id}>\n          {person.name} {person.number}{' '}\n          <button onClick={() => props.handleClick(person.id)}>Delete</button>\n        </div>\n      ));\n  };\n  return searchPersons(props.search);\n};\n\nexport default People;\n","import axios from 'axios';\n\nconst apiURL = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(apiURL);\n  return request.then(res => res.data);\n};\n\nconst create = newObj => {\n  const request = axios.post(apiURL, newObj);\n  return request.then(res => res.data);\n};\n\nconst edit = (id, newObj) => {\n  const request = axios.put(`${apiURL}/${id}`, newObj);\n  return request.then(res => res.data);\n};\n\nconst delObj = id => {\n  const request = axios.delete(`${apiURL}/${id}`);\n  return request.then(res => res.data);\n};\n\nexport default {\n  getAll,\n  create,\n  edit,\n  delObj\n};\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className={message.type}>{message.message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport Filter from './Components/Filter';\nimport Form from './Components/Form';\nimport People from './Components/People';\nimport noteService from './services/persons';\nimport Notification from './Components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [search, setSearch] = useState('');\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then(initialData => {\n      setPersons(initialData);\n    });\n  }, []);\n\n  const addName = e => {\n    e.preventDefault();\n\n    //Checks if name was already added (isn't case sensitive) then asks if they want to update number\n    if (checkName()) {\n      handleNewPhone();\n      return;\n    }\n\n    const personObj = {\n      name: newName,\n      number: newNumber\n    };\n\n    noteService.create(personObj).then(newPerson => {\n      setMessage({\n        message: `Added ${personObj.name}`,\n        type: 'success'\n      });\n      setPersons(persons.concat(newPerson));\n      setNewName('');\n      setNewNumber('');\n\n      setTimeout(() => {\n        setMessage(null);\n      }, 3000);\n    });\n  };\n\n  const checkName = () => {\n    if (\n      persons\n        .map(person => person.name.toLowerCase())\n        .includes(newName.toLowerCase())\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const handleNewName = e => {\n    setNewName(e.target.value);\n  };\n  const handleSearch = e => {\n    setSearch(e.target.value);\n  };\n  const handleNewNumber = e => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleClick = id => {\n    const selPerson = persons.find(person => person.id === id);\n    const newList = persons.filter(person => person.id !== id);\n\n    if (window.confirm(`Delete ${selPerson.name}?`)) {\n      noteService\n        .delObj(id)\n        .then(res => setPersons(newList))\n        .catch(`${selPerson.name} was already deleted from the phonebook`);\n    }\n  };\n\n  const handleNewPhone = () => {\n    const selPerson = persons.find(\n      person => person.name.toLowerCase() === newName.toLowerCase()\n    );\n    const newInfo = { ...selPerson, number: newNumber };\n\n    if (\n      window.confirm(\n        `${newName} is already added, replace the old number with the new one?`\n      )\n    ) {\n      noteService\n        .edit(`${selPerson.id}`, newInfo)\n        .then(updatedInfo => {\n          setPersons(\n            persons.map(person =>\n              person.id !== selPerson.id ? person : updatedInfo\n            )\n          );\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch(err => {\n          setMessage({\n            message: `Information of ${selPerson.name} has already been removed from the server`,\n            type: 'error'\n          });\n          setPersons(persons.filter(person => person.id !== selPerson.id));\n          setNewName('');\n          setNewNumber('');\n\n          setTimeout(() => {\n            setMessage(null);\n          }, 3000);\n        });\n    } else {\n      return;\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter search={search} handleSearch={handleSearch} />\n      <h2>Add New Person</h2>\n      <Form\n        handleSubmit={addName}\n        newName={newName}\n        newNumber={newNumber}\n        handleNewName={handleNewName}\n        handleNewNumber={handleNewNumber}\n      />\n      <h2>Numbers</h2>\n      <People search={search} persons={persons} handleClick={handleClick} />\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}